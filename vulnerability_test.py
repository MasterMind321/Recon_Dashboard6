import requests
import sys
import json
import uuid
from datetime import datetime, timedelta
import time

class VulnerabilityScanningTester:
    def __init__(self, base_url):
        self.base_url = base_url
        self.tests_run = 0
        self.tests_passed = 0
        self.target_id = None
        self.vulnerability_job_id = None

    def run_test(self, name, method, endpoint, expected_status, data=None, params=None):
        """Run a single API test"""
        url = f"{self.base_url}/{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        self.tests_run += 1
        print(f"\nüîç Testing {name}...")
        print(f"URL: {url}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, params=params)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers)
            elif method == 'DELETE':
                response = requests.delete(url, headers=headers)

            success = response.status_code == expected_status
            if success:
                self.tests_passed += 1
                print(f"‚úÖ Passed - Status: {response.status_code}")
                try:
                    return success, response.json()
                except:
                    return success, {}
            else:
                print(f"‚ùå Failed - Expected {expected_status}, got {response.status_code}")
                try:
                    print(f"Response: {response.text}")
                except:
                    pass
                return False, {}

        except Exception as e:
            print(f"‚ùå Failed - Error: {str(e)}")
            return False, {}

    def create_test_target(self):
        """Create a test target for vulnerability scanning"""
        domain = f"test-vuln-{uuid.uuid4().hex[:8]}.example.com"
        
        target_data = {
            "domain": domain,
            "type": "domain",
            "workflow": "full-recon",
            "notes": f"Test target for vulnerability scanning created at {datetime.utcnow().isoformat()}"
        }
        
        success, data = self.run_test(
            f"Create Target: {domain}",
            "POST",
            "api/targets",
            200,
            data=target_data
        )
        
        if success and data:
            self.target_id = data.get('id')
            print(f"Created target with ID: {self.target_id}")
            
        return success, data

    def test_get_vulnerability_tools_status(self):
        """Test getting vulnerability tools status"""
        success, data = self.run_test(
            "Get Vulnerability Tools Status",
            "GET",
            "api/vulnerability-tools/status",
            200
        )
        
        if success and data:
            # Verify the structure of the response
            if 'tools' in data and 'total_tools' in data and 'installed_tools' in data:
                print("‚úÖ Vulnerability tools status structure is correct")
                
                # Print tools status
                print(f"Total tools: {data['total_tools']}")
                print(f"Installed tools: {data['installed_tools']}")
                
                # Check specific tools
                tools = data['tools']
                for tool, installed in tools.items():
                    print(f"Tool {tool}: {'Installed' if installed else 'Not installed'}")
                    
                # Verify all 7 vulnerability tools are present
                expected_tools = [
                    "dalfox", "xsstrike", "sqlmap", "crlfuzz", 
                    "qsreplace", "nuclei", "nuclei-templates"
                ]
                
                missing_tools = [tool for tool in expected_tools if tool not in tools]
                if missing_tools:
                    print(f"‚ö†Ô∏è Missing tools in status: {', '.join(missing_tools)}")
                    success = False
                else:
                    print(f"‚úÖ All 7 vulnerability tools are present in status")
            else:
                print("‚ö†Ô∏è Vulnerability tools status structure is incorrect")
                success = False
                
        return success, data
    
    def test_install_vulnerability_tools(self):
        """Test installing vulnerability tools"""
        return self.run_test(
            "Install Vulnerability Tools",
            "POST",
            "api/vulnerability-tools/install",
            200
        )
    
    def test_start_vulnerability_scan(self, target_id=None, tools=None, urls=None):
        """Test starting vulnerability scan for a target"""
        if target_id is None:
            if self.target_id is None:
                print("‚ö†Ô∏è No target ID available for vulnerability scan test")
                return False, {}
            target_id = self.target_id
            
        data = {
            "notes": "Test vulnerability scan",
            "deep_scan": False,
            "include_low_severity": True,
            "max_threads": 5,
            "timeout_per_url": 180
        }
        
        if tools:
            data["tools"] = tools
            
        if urls:
            data["urls"] = urls
            
        success, response = self.run_test(
            f"Start Vulnerability Scan for Target: {target_id}",
            "POST",
            f"api/targets/{target_id}/scan-vulnerabilities",
            200,
            data=data
        )
        
        if success and response:
            self.vulnerability_job_id = response.get('id')
            print(f"Created vulnerability scan job with ID: {self.vulnerability_job_id}")
            
            # Verify the job has the correct data
            if response.get('target_id') != target_id:
                print(f"‚ö†Ô∏è Vulnerability job has incorrect target_id: {response.get('target_id')} (expected {target_id})")
                success = False
                
            if response.get('status') != 'pending':
                print(f"‚ö†Ô∏è Vulnerability job has incorrect status: {response.get('status')} (expected 'pending')")
                success = False
                
        return success, response
    
    def test_start_vulnerability_scan_invalid_target(self):
        """Test starting vulnerability scan for an invalid target"""
        invalid_id = str(uuid.uuid4())  # Generate a random UUID that shouldn't exist
        
        return self.run_test(
            f"Start Vulnerability Scan with Invalid Target ID: {invalid_id}",
            "POST",
            f"api/targets/{invalid_id}/scan-vulnerabilities",
            404,  # Expect 404 Not Found
            data={"notes": "This should fail"}
        )
    
    def test_get_vulnerability_job(self, job_id=None):
        """Test getting a specific vulnerability job"""
        if job_id is None:
            if self.vulnerability_job_id is None:
                print("‚ö†Ô∏è No vulnerability job ID available for get test")
                return False, {}
            job_id = self.vulnerability_job_id
            
        success, data = self.run_test(
            f"Get Vulnerability Job: {job_id}",
            "GET",
            f"api/vulnerability-jobs/{job_id}",
            200
        )
        
        if success and data:
            print(f"Retrieved vulnerability job for domain: {data.get('domain')} (status: {data.get('status')})")
            
            # Verify the job has all required fields
            required_fields = ['id', 'target_id', 'domain', 'status', 'created_at', 'urls', 'tools']
            missing_fields = [field for field in required_fields if field not in data]
            
            if missing_fields:
                print(f"‚ö†Ô∏è Vulnerability job missing required fields: {', '.join(missing_fields)}")
                success = False
            else:
                print("‚úÖ Vulnerability job has all required fields")
                print(f"URLs to scan: {len(data.get('urls', []))}")
                print(f"Tools to use: {', '.join([t for t in data.get('tools', [])])}")
                
        return success, data
    
    def test_get_vulnerability_job_invalid_id(self):
        """Test getting a vulnerability job with an invalid ID"""
        invalid_id = str(uuid.uuid4())  # Generate a random UUID that shouldn't exist
        
        return self.run_test(
            f"Get Vulnerability Job with Invalid ID: {invalid_id}",
            "GET",
            f"api/vulnerability-jobs/{invalid_id}",
            404  # Expect 404 Not Found
        )
    
    def test_get_target_vulnerability_jobs(self, target_id=None):
        """Test getting vulnerability jobs for a target"""
        if target_id is None:
            if self.target_id is None:
                print("‚ö†Ô∏è No target ID available for vulnerability jobs test")
                return False, {}
            target_id = self.target_id
            
        success, data = self.run_test(
            f"Get Vulnerability Jobs for Target: {target_id}",
            "GET",
            f"api/targets/{target_id}/vulnerability-jobs",
            200
        )
        
        if success and data:
            if isinstance(data, list):
                print(f"Found {len(data)} vulnerability jobs for target")
                
                # Verify structure of vulnerability jobs
                if len(data) > 0:
                    first_job = data[0]
                    required_fields = ['id', 'target_id', 'domain', 'status', 'created_at', 'urls', 'tools']
                    missing_fields = [field for field in required_fields if field not in first_job]
                    
                    if missing_fields:
                        print(f"‚ö†Ô∏è Vulnerability job missing required fields: {', '.join(missing_fields)}")
                        success = False
                    else:
                        print("‚úÖ Vulnerability job has all required fields")
            else:
                print(f"‚ö†Ô∏è Expected a list of vulnerability jobs, got: {type(data)}")
                success = False
                
        return success, data
    
    def test_get_target_vulnerability_jobs_invalid_target(self):
        """Test getting vulnerability jobs for an invalid target"""
        invalid_id = str(uuid.uuid4())  # Generate a random UUID that shouldn't exist
        
        return self.run_test(
            f"Get Vulnerability Jobs with Invalid Target ID: {invalid_id}",
            "GET",
            f"api/targets/{invalid_id}/vulnerability-jobs",
            404  # Expect 404 Not Found
        )
    
    def test_get_target_vulnerability_results(self, target_id=None, severity=None, vulnerability_type=None, min_confidence=0.0):
        """Test getting vulnerability results for a target"""
        if target_id is None:
            if self.target_id is None:
                print("‚ö†Ô∏è No target ID available for vulnerability results test")
                return False, {}
            target_id = self.target_id
            
        params = {}
        if severity:
            params["severity"] = severity
        if vulnerability_type:
            params["vulnerability_type"] = vulnerability_type
        if min_confidence > 0.0:
            params["min_confidence"] = min_confidence
            
        filter_desc = []
        if severity:
            filter_desc.append(f"severity={severity}")
        if vulnerability_type:
            filter_desc.append(f"type={vulnerability_type}")
        if min_confidence > 0.0:
            filter_desc.append(f"min_confidence={min_confidence}")
            
        filter_str = " and ".join(filter_desc) if filter_desc else "no filters"
            
        success, data = self.run_test(
            f"Get Vulnerability Results for Target: {target_id} ({filter_str})",
            "GET",
            f"api/targets/{target_id}/vulnerability-results",
            200,
            params=params
        )
        
        if success and data:
            if isinstance(data, list):
                print(f"Found {len(data)} vulnerability results for target")
                
                # Verify structure of vulnerability results
                if len(data) > 0:
                    first_result = data[0]
                    required_fields = ['url', 'subdomain', 'scan_status', 'vulnerabilities', 'total_vulnerabilities']
                    missing_fields = [field for field in required_fields if field not in first_result]
                    
                    if missing_fields:
                        print(f"‚ö†Ô∏è Vulnerability result missing required fields: {', '.join(missing_fields)}")
                        success = False
                    else:
                        print("‚úÖ Vulnerability result has all required fields")
                        
                    # Print some vulnerability examples
                    print(f"  URL: {first_result.get('url')}")
                    print(f"  Total vulnerabilities: {first_result.get('total_vulnerabilities')}")
                    print(f"  Critical: {first_result.get('critical_count')}")
                    print(f"  High: {first_result.get('high_count')}")
                    print(f"  Medium: {first_result.get('medium_count')}")
                    print(f"  Low: {first_result.get('low_count')}")
                    print(f"  Info: {first_result.get('info_count')}")
                    
                    # Check vulnerabilities
                    vulnerabilities = first_result.get('vulnerabilities', [])
                    if vulnerabilities:
                        print(f"  First vulnerability: {vulnerabilities[0].get('vulnerability_type')} ({vulnerabilities[0].get('severity')})")
                        print(f"    URL: {vulnerabilities[0].get('url')}")
                        print(f"    Tool: {vulnerabilities[0].get('tool_used')}")
            else:
                print(f"‚ö†Ô∏è Expected a list of vulnerability results, got: {type(data)}")
                success = False
                
        return success, data
    
    def test_get_target_vulnerability_results_invalid_target(self):
        """Test getting vulnerability results for an invalid target"""
        invalid_id = str(uuid.uuid4())  # Generate a random UUID that shouldn't exist
        
        return self.run_test(
            f"Get Vulnerability Results with Invalid Target ID: {invalid_id}",
            "GET",
            f"api/targets/{invalid_id}/vulnerability-results",
            404  # Expect 404 Not Found
        )
    
    def test_get_target_vulnerabilities(self, target_id=None, severity=None, vulnerability_type=None, min_confidence=0.0):
        """Test getting all vulnerabilities for a target"""
        if target_id is None:
            if self.target_id is None:
                print("‚ö†Ô∏è No target ID available for vulnerabilities test")
                return False, {}
            target_id = self.target_id
            
        params = {}
        if severity:
            params["severity"] = severity
        if vulnerability_type:
            params["vulnerability_type"] = vulnerability_type
        if min_confidence > 0.0:
            params["min_confidence"] = min_confidence
            
        filter_desc = []
        if severity:
            filter_desc.append(f"severity={severity}")
        if vulnerability_type:
            filter_desc.append(f"type={vulnerability_type}")
        if min_confidence > 0.0:
            filter_desc.append(f"min_confidence={min_confidence}")
            
        filter_str = " and ".join(filter_desc) if filter_desc else "no filters"
            
        success, data = self.run_test(
            f"Get Vulnerabilities for Target: {target_id} ({filter_str})",
            "GET",
            f"api/targets/{target_id}/vulnerabilities",
            200,
            params=params
        )
        
        if success and data:
            if isinstance(data, list):
                print(f"Found {len(data)} vulnerabilities for target")
                
                # Verify structure of vulnerabilities
                if len(data) > 0:
                    first_vuln = data[0]
                    required_fields = ['id', 'url', 'vulnerability_type', 'severity', 'confidence_score', 'description', 'tool_used']
                    missing_fields = [field for field in required_fields if field not in first_vuln]
                    
                    if missing_fields:
                        print(f"‚ö†Ô∏è Vulnerability missing required fields: {', '.join(missing_fields)}")
                        success = False
                    else:
                        print("‚úÖ Vulnerability has all required fields")
                        
                    # Print some vulnerability examples
                    for i, vuln in enumerate(data[:3]):
                        print(f"  Vulnerability {i+1}: {vuln.get('vulnerability_type')} ({vuln.get('severity')})")
                        print(f"    URL: {vuln.get('url')}")
                        print(f"    Tool: {vuln.get('tool_used')}")
                        print(f"    Confidence: {vuln.get('confidence_score')}")
            else:
                print(f"‚ö†Ô∏è Expected a list of vulnerabilities, got: {type(data)}")
                success = False
                
        return success, data
    
    def test_get_target_vulnerabilities_invalid_target(self):
        """Test getting vulnerabilities for an invalid target"""
        invalid_id = str(uuid.uuid4())  # Generate a random UUID that shouldn't exist
        
        return self.run_test(
            f"Get Vulnerabilities with Invalid Target ID: {invalid_id}",
            "GET",
            f"api/targets/{invalid_id}/vulnerabilities",
            404  # Expect 404 Not Found
        )
    
    def test_search_vulnerabilities(self, vulnerability_type=None, severity=None, min_confidence=0.0, url_pattern=None):
        """Test searching vulnerabilities across all targets"""
        data = {
            "limit": 10,
            "offset": 0
        }
        
        if vulnerability_type:
            data["vulnerability_type"] = vulnerability_type
        if severity:
            data["severity"] = severity
        if min_confidence > 0.0:
            data["min_confidence"] = min_confidence
        if url_pattern:
            data["url_pattern"] = url_pattern
            
        filter_desc = []
        if vulnerability_type:
            filter_desc.append(f"type={vulnerability_type}")
        if severity:
            filter_desc.append(f"severity={severity}")
        if min_confidence > 0.0:
            filter_desc.append(f"min_confidence={min_confidence}")
        if url_pattern:
            filter_desc.append(f"url_pattern={url_pattern}")
            
        filter_str = " and ".join(filter_desc) if filter_desc else "no filters"
            
        success, response = self.run_test(
            f"Search Vulnerabilities ({filter_str})",
            "POST",
            "api/vulnerability/search",
            200,
            data=data
        )
        
        if success and response:
            if isinstance(response, list):
                print(f"Found {len(response)} vulnerabilities matching search criteria")
                
                # Verify structure of search results
                if len(response) > 0:
                    first_vuln = response[0]
                    required_fields = ['id', 'url', 'vulnerability_type', 'severity', 'confidence_score', 'description', 'tool_used']
                    missing_fields = [field for field in required_fields if field not in first_vuln]
                    
                    if missing_fields:
                        print(f"‚ö†Ô∏è Search result missing required fields: {', '.join(missing_fields)}")
                        success = False
                    else:
                        print("‚úÖ Search result has all required fields")
                        
                    # Print some search result examples
                    for i, vuln in enumerate(response[:3]):
                        print(f"  Result {i+1}: {vuln.get('vulnerability_type')} ({vuln.get('severity')})")
                        print(f"    URL: {vuln.get('url')}")
                        print(f"    Tool: {vuln.get('tool_used')}")
                        print(f"    Confidence: {vuln.get('confidence_score')}")
            else:
                print(f"‚ö†Ô∏è Expected a list of search results, got: {type(response)}")
                success = False
                
        return success, response
    
    def test_get_vulnerability_stats(self):
        """Test getting overall vulnerability statistics"""
        success, data = self.run_test(
            "Get Vulnerability Statistics",
            "GET",
            "api/vulnerability/stats",
            200
        )
        
        if success and data:
            # Verify the structure of the stats response
            required_fields = ['total_scans', 'total_vulnerabilities', 
                              'critical_vulnerabilities', 'high_vulnerabilities', 
                              'medium_vulnerabilities', 'low_vulnerabilities', 
                              'info_vulnerabilities', 'vulnerability_types', 
                              'tools_used', 'scans_last_24h', 
                              'vulnerabilities_last_24h', 'top_vulnerable_domains']
            missing_fields = [field for field in required_fields if field not in data]
            
            if missing_fields:
                print(f"‚ö†Ô∏è Vulnerability stats missing required fields: {', '.join(missing_fields)}")
                success = False
            else:
                print("‚úÖ Vulnerability stats has all required fields")
                print(f"Total scans: {data['total_scans']}")
                print(f"Total vulnerabilities: {data['total_vulnerabilities']}")
                print(f"Critical vulnerabilities: {data['critical_vulnerabilities']}")
                print(f"High vulnerabilities: {data['high_vulnerabilities']}")
                print(f"Medium vulnerabilities: {data['medium_vulnerabilities']}")
                print(f"Low vulnerabilities: {data['low_vulnerabilities']}")
                print(f"Info vulnerabilities: {data['info_vulnerabilities']}")
                print(f"Vulnerability types: {json.dumps(data['vulnerability_types'], indent=2)}")
                print(f"Tools used: {json.dumps(data['tools_used'], indent=2)}")
                print(f"Scans in last 24h: {data['scans_last_24h']}")
                print(f"Vulnerabilities in last 24h: {data['vulnerabilities_last_24h']}")
                print(f"Top vulnerable domains: {json.dumps(data['top_vulnerable_domains'], indent=2)}")
                
        return success, data

    def run_all_tests(self):
        """Run all vulnerability scanning API tests"""
        print("\nüîç Running Vulnerability Scanning API Tests...")
        
        # 1. Test vulnerability tools status
        self.test_get_vulnerability_tools_status()
        
        # 2. Test tool installation
        self.test_install_vulnerability_tools()
        
        # Create a target if we don't have one
        if not self.target_id:
            self.create_test_target()
        
        # 3. Test starting vulnerability scan
        # First, try with specific URLs
        test_urls = ["https://example.com", "https://example.org"]
        self.test_start_vulnerability_scan(urls=test_urls)
        
        # 4. Test job status retrieval
        if self.vulnerability_job_id:
            self.test_get_vulnerability_job()
            
            # Wait a bit for the job to process
            print("Waiting 5 seconds for job to process...")
            time.sleep(5)
            
            # Check job status again
            self.test_get_vulnerability_job()
        
        # 5. Test job history
        self.test_get_target_vulnerability_jobs()
        
        # 6. Test results retrieval
        self.test_get_target_vulnerability_results()
        
        # 7. Test vulnerabilities list
        self.test_get_target_vulnerabilities()
        
        # 8. Test search functionality
        self.test_search_vulnerabilities()
        
        # 9. Test statistics
        self.test_get_vulnerability_stats()
        
        # Test error cases
        self.test_start_vulnerability_scan_invalid_target()
        self.test_get_vulnerability_job_invalid_id()
        self.test_get_target_vulnerability_jobs_invalid_target()
        self.test_get_target_vulnerability_results_invalid_target()
        self.test_get_target_vulnerabilities_invalid_target()
        
        print(f"\n‚úÖ Vulnerability Scanning API Tests completed: {self.tests_passed}/{self.tests_run} tests passed")

def main():
    # Get the backend URL from the frontend .env file
    backend_url = "https://9e556f27-e877-4620-8b60-fe80bcce9d6c.preview.emergentagent.com"
    
    print(f"Using backend URL: {backend_url}")
    
    tester = VulnerabilityScanningTester(backend_url)
    tester.run_all_tests()
    
    print(f"\nüèÅ All tests completed: {tester.tests_passed}/{tester.tests_run} tests passed ({(tester.tests_passed/tester.tests_run)*100:.2f}%)")

if __name__ == "__main__":
    main()